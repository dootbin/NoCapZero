name: Build Orange Pi Zero 2W Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant to create'
        required: true
        default: 'runtime'
        type: choice
        options:
        - runtime
        - development
        - debug
        - all

env:
  DEBIAN_FRONTEND: noninteractive
  # Pre-built component URLs - use specific version or 'latest' 
  COMPONENTS_VERSION: v1.0.0
  MALI_DRIVER_URL: https://github.com/LibreELEC/libmali/raw/master/lib/aarch64-linux-gnu/libmali-bifrost-g31-r16p0-gbm.so

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build matrix
        id: build-matrix
        run: |
          if [ "${{ github.event.inputs.build_variant }}" = "all" ] || [ -z "${{ github.event.inputs.build_variant }}" ]; then
            MATRIX='["runtime", "development", "debug"]'
          else
            MATRIX='["${{ github.event.inputs.build_variant }}"]'
          fi
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        variant: ${{ fromJson(needs.setup.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget \
            curl \
            xz-utils \
            qemu-user-static \
            binfmt-support \
            debootstrap \
            parted \
            dosfstools \
            e2fsprogs \
            pixz \
            rsync \
            device-tree-compiler

      - name: Download pre-built U-Boot
        id: download_uboot
        run: |
          mkdir -p /tmp/downloads
          if wget -O /tmp/downloads/u-boot-sunxi-with-spl.bin \
            https://github.com/${{ github.repository }}/releases/download/${{ env.COMPONENTS_VERSION }}/u-boot-sunxi-with-spl.bin 2>/dev/null; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "WARNING: Failed to download prebuilt U-Boot"
          fi

      - name: Download pre-built kernel and modules
        id: download_kernel
        run: |
          SUCCESS=true
          
          # Download pre-built kernel image
          if ! wget -O /tmp/downloads/Image \
            https://github.com/${{ github.repository }}/releases/download/${{ env.COMPONENTS_VERSION }}/Image 2>/dev/null; then
            echo "WARNING: Failed to download prebuilt kernel"
            SUCCESS=false
          fi
          
          # Download pre-built DTB
          if ! wget -O /tmp/downloads/sun50i-h618-orangepi-zero2w.dtb \
            https://github.com/${{ github.repository }}/releases/download/${{ env.COMPONENTS_VERSION }}/sun50i-h618-orangepi-zero2w.dtb 2>/dev/null; then
            echo "WARNING: Failed to download prebuilt DTB"
            SUCCESS=false
          fi
          
          # Download kernel modules tarball
          if ! wget -O /tmp/downloads/modules.tar.gz \
            https://github.com/${{ github.repository }}/releases/download/${{ env.COMPONENTS_VERSION }}/modules.tar.gz 2>/dev/null; then
            echo "WARNING: Failed to download prebuilt modules"
            SUCCESS=false
          fi
          
          # Extract modules if download succeeded
          if [ -f /tmp/downloads/modules.tar.gz ]; then
            mkdir -p /tmp
            if tar -tzf /tmp/downloads/modules.tar.gz >/dev/null 2>&1; then
              tar -xzf /tmp/downloads/modules.tar.gz -C /tmp/
            else
              echo "WARNING: modules.tar.gz is corrupted or empty"
              rm -f /tmp/downloads/modules.tar.gz
              SUCCESS=false
            fi
          fi
          
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT

      - name: Download Mali GPU driver
        run: |
          wget -O /tmp/downloads/libmali.so "$MALI_DRIVER_URL" || echo "WARNING: Failed to download Mali driver"

      - name: Download Arch Linux ARM base
        run: |
          wget -O /tmp/downloads/ArchLinuxARM-aarch64-latest.tar.gz \
            http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz

      - name: Build components from source (if needed)
        if: steps.download_uboot.outputs.success == 'false' || steps.download_kernel.outputs.success == 'false'
        run: |
          echo "Prebuilt components not available, building from source..."
          
          # Install build dependencies
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            bison \
            flex \
            libssl-dev \
            libgnutls28-dev \
            bc \
            u-boot-tools
          
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Build U-Boot if needed
          if [ ! -f /tmp/downloads/u-boot-sunxi-with-spl.bin ]; then
            cd /tmp
            # Get latest ATF
            ATF_TAG=$(git ls-remote --tags --sort="v:refname" https://github.com/ARM-software/arm-trusted-firmware.git | grep -E 'refs/tags/v[0-9]+\.[0-9]+(\.[0-9]+)?$' | tail -n1 | sed 's/.*refs\/tags\///')
            git clone --depth 1 -b "$ATF_TAG" https://github.com/ARM-software/arm-trusted-firmware.git
            cd arm-trusted-firmware
            make PLAT=sun50i_h616 CROSS_COMPILE=$CROSS_COMPILE bl31
            
            # Get latest U-Boot
            cd /tmp
            UBOOT_TAG=$(git ls-remote --tags --sort="v:refname" https://github.com/u-boot/u-boot.git | grep -E 'refs/tags/v20[0-9]{2}\.[0-9]{2}$' | tail -n1 | sed 's/.*refs\/tags\///')
            git clone --depth 1 -b "$UBOOT_TAG" https://github.com/u-boot/u-boot.git
            cd u-boot
            cp ../arm-trusted-firmware/build/sun50i_h616/release/bl31.bin .
            make ARCH=arm CROSS_COMPILE=$CROSS_COMPILE orangepi_zero2w_defconfig
            make ARCH=arm CROSS_COMPILE=$CROSS_COMPILE BL31=bl31.bin -j$(nproc)
            cp u-boot-sunxi-with-spl.bin /tmp/downloads/
          fi
          
          # Build kernel if needed
          if [ ! -f /tmp/downloads/Image ] || [ ! -f /tmp/downloads/modules.tar.gz ]; then
            cd /tmp
            git clone --depth 1 -b orange-pi-6.1-sun50iw9 \
              https://github.com/orangepi-xunlong/linux-orangepi.git kernel
            cd kernel
            
            # Use our custom kernel config for OrangePi Zero 2W
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE defconfig
            # Apply our custom configuration
            while IFS= read -r line; do
              if [[ $line == CONFIG_* ]] && [[ $line == *=y ]]; then
                config_name=$(echo "$line" | cut -d'=' -f1)
                ./scripts/config --enable "$config_name"
              elif [[ $line == CONFIG_* ]] && [[ $line == *=m ]]; then
                config_name=$(echo "$line" | cut -d'=' -f1)
                ./scripts/config --module "$config_name"
              elif [[ $line == CONFIG_* ]] && [[ $line == *=* ]]; then
                config_name=$(echo "$line" | cut -d'=' -f1)
                config_value=$(echo "$line" | cut -d'=' -f2)
                ./scripts/config --set-str "$config_name" "$config_value"
              fi
            done < <(curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/configs/kernel-config | grep -E '^CONFIG_')
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE olddefconfig
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) Image dtbs modules
            
            cp arch/arm64/boot/Image /tmp/downloads/
            if [ -f arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dtb ]; then
              cp arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dtb /tmp/downloads/
            else
              # Try alternative DTB locations
              find arch/arm64/boot/dts -name "*orangepi*zero2w*.dtb" -exec cp {} /tmp/downloads/sun50i-h618-orangepi-zero2w.dtb \;
            fi
            
            # Install modules
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE INSTALL_MOD_PATH=/tmp/modules_install modules_install
            cd /tmp
            tar -czf /tmp/downloads/modules.tar.gz -C /tmp/modules_install .
            # Extract to the expected location
            mkdir -p /tmp/modules
            tar -xzf /tmp/downloads/modules.tar.gz -C /tmp/modules/
          fi

      - name: Create root filesystem
        run: |
          ./scripts/create-rootfs.sh \
            --variant ${{ matrix.variant }} \
            --arch-tarball /tmp/downloads/ArchLinuxARM-aarch64-latest.tar.gz \
            --kernel-modules /tmp/modules \
            --mali-driver /tmp/downloads/libmali.so \
            --output /tmp/rootfs-${{ matrix.variant }}

      - name: Build SD card image
        run: |
          ./scripts/create-image.sh \
            --rootfs /tmp/rootfs-${{ matrix.variant }} \
            --uboot /tmp/downloads/u-boot-sunxi-with-spl.bin \
            --kernel /tmp/downloads/Image \
            --dtb /tmp/downloads/sun50i-h618-orangepi-zero2w.dtb \
            --variant ${{ matrix.variant }} \
            --output orangepi-zero2w-${{ matrix.variant }}.img

      - name: Compress image
        run: |
          pixz -9 orangepi-zero2w-${{ matrix.variant }}.img
          sha256sum orangepi-zero2w-${{ matrix.variant }}.img.xz > orangepi-zero2w-${{ matrix.variant }}.img.xz.sha256

      - name: Generate build info
        run: |
          cat > orangepi-zero2w-${{ matrix.variant }}.info << EOF
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Variant: ${{ matrix.variant }}
          Git Commit: ${{ github.sha }}
          Git Ref: ${{ github.ref }}
          Pre-built Components: U-Boot, Kernel, DTB
          Image Size: $(stat -c%s orangepi-zero2w-${{ matrix.variant }}.img.xz) bytes
          EOF

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: orangepi-zero2w-${{ matrix.variant }}
          path: |
            orangepi-zero2w-${{ matrix.variant }}.img.xz
            orangepi-zero2w-${{ matrix.variant }}.img.xz.sha256
            orangepi-zero2w-${{ matrix.variant }}.info
          retention-days: 30

      - name: Upload to release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            orangepi-zero2w-${{ matrix.variant }}.img.xz
            orangepi-zero2w-${{ matrix.variant }}.img.xz.sha256
            orangepi-zero2w-${{ matrix.variant }}.info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate:
    needs: build
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        variant: ["runtime", "development", "debug"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: orangepi-zero2w-${{ matrix.variant }}

      - name: Validate image structure
        run: |
          xz -d orangepi-zero2w-${{ matrix.variant }}.img.xz
          ./scripts/validate-image.sh orangepi-zero2w-${{ matrix.variant }}.img