name: Build Orange Pi Zero 2W Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant to create'
        required: true
        default: 'runtime'
        type: choice
        options:
        - runtime
        - development
        - debug
        - all

env:
  DEBIAN_FRONTEND: noninteractive
  ARCH: arm64
  CROSS_COMPILE: aarch64-linux-gnu-

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build matrix
        id: build-matrix
        run: |
          if [ "${{ github.event.inputs.build_variant }}" = "all" ] || [ -z "${{ github.event.inputs.build_variant }}" ]; then
            MATRIX='["runtime", "development", "debug"]'
          else
            MATRIX='["${{ github.event.inputs.build_variant }}"]'
          fi
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

      - name: Generate cache key
        id: cache-key
        run: |
          KEY="orangepi-zero2w-$(date +'%Y%m%d')-$(sha256sum configs/* | sha256sum | cut -d' ' -f1 | head -c8)"
          echo "key=${KEY}" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        variant: ${{ fromJson(needs.setup.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            /tmp/build-cache
            /tmp/toolchain
          key: ${{ needs.setup.outputs.cache-key }}-${{ matrix.variant }}
          restore-keys: |
            ${{ needs.setup.outputs.cache-key }}-
            orangepi-zero2w-

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            device-tree-compiler \
            u-boot-tools \
            bison \
            flex \
            libssl-dev \
            bc \
            kmod \
            cpio \
            rsync \
            wget \
            curl \
            xz-utils \
            qemu-user-static \
            binfmt-support \
            debootstrap \
            parted \
            dosfstools \
            e2fsprogs \
            pixz \
            p7zip-full

      - name: Setup cross-compilation environment
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Download Arch Linux ARM base
        run: |
          mkdir -p /tmp/build-cache
          if [ ! -f /tmp/build-cache/ArchLinuxARM-aarch64-latest.tar.gz ]; then
            wget -O /tmp/build-cache/ArchLinuxARM-aarch64-latest.tar.gz \
              http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
          fi

      - name: Clone and build U-Boot
        run: |
          if [ ! -d /tmp/build-cache/u-boot ]; then
            git clone --depth 1 -b v2018.05-h618 \
              https://github.com/orangepi-xunlong/u-boot-orangepi.git \
              /tmp/build-cache/u-boot
            cd /tmp/build-cache/u-boot
            
            # Apply patches
            for patch in ${{ github.workspace }}/patches/uboot/*.patch; do
              [ -f "$patch" ] && git apply "$patch"
            done
            
            # U-Boot needs 32-bit ARM compiler even for ARM64 boards
            export ARCH=arm
            export CROSS_COMPILE=arm-linux-gnueabihf-
            make orangepi_zero2w_defconfig
            make -j$(nproc)
          fi

      - name: Clone and build kernel
        run: |
          if [ ! -d /tmp/build-cache/kernel ]; then
            git clone --depth 1 -b orange-pi-6.1-sun50iw9 \
              https://github.com/orangepi-xunlong/linux-orangepi.git \
              /tmp/build-cache/kernel
            cd /tmp/build-cache/kernel
            
            # Apply custom patches
            for patch in ${{ github.workspace }}/patches/kernel/*.patch; do
              [ -f "$patch" ] && git apply "$patch"
            done
            
            # Use our minimal config
            cp ${{ github.workspace }}/configs/kernel-config .config
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE olddefconfig
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) Image dtbs modules
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE INSTALL_MOD_PATH=/tmp/modules modules_install
          fi

      - name: Download Mali GPU drivers
        run: |
          mkdir -p /tmp/build-cache/mali
          if [ ! -f /tmp/build-cache/mali/libmali.so ]; then
            # Download Mali-G31 drivers for Orange Pi Zero 2W
            wget -O /tmp/build-cache/mali/libmali.so \
              https://github.com/JeffyCN/mirrors/raw/libmali/lib/aarch64-linux-gnu/libmali-bifrost-g31-rxp0-wayland-gbm.so
          fi

      - name: Create root filesystem
        run: |
          ./scripts/create-rootfs.sh \
            --variant ${{ matrix.variant }} \
            --arch-tarball /tmp/build-cache/ArchLinuxARM-aarch64-latest.tar.gz \
            --kernel-modules /tmp/modules \
            --mali-driver /tmp/build-cache/mali/libmali.so \
            --output /tmp/rootfs-${{ matrix.variant }}

      - name: Build SD card image
        run: |
          ./scripts/create-image.sh \
            --rootfs /tmp/rootfs-${{ matrix.variant }} \
            --uboot /tmp/build-cache/u-boot/u-boot-sunxi-with-spl.bin \
            --kernel /tmp/build-cache/kernel/arch/arm64/boot/Image \
            --dtb /tmp/build-cache/kernel/arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dtb \
            --variant ${{ matrix.variant }} \
            --output orangepi-zero2w-${{ matrix.variant }}.img

      - name: Compress image
        run: |
          pixz -9 orangepi-zero2w-${{ matrix.variant }}.img
          sha256sum orangepi-zero2w-${{ matrix.variant }}.img.xz > orangepi-zero2w-${{ matrix.variant }}.img.xz.sha256

      - name: Generate build info
        run: |
          cat > orangepi-zero2w-${{ matrix.variant }}.info << EOF
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Variant: ${{ matrix.variant }}
          Git Commit: ${{ github.sha }}
          Git Ref: ${{ github.ref }}
          Kernel Version: $(cd /tmp/build-cache/kernel && make kernelversion)
          U-Boot Version: $(cd /tmp/build-cache/u-boot && make version)
          Image Size: $(stat -c%s orangepi-zero2w-${{ matrix.variant }}.img.xz) bytes
          EOF

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: orangepi-zero2w-${{ matrix.variant }}
          path: |
            orangepi-zero2w-${{ matrix.variant }}.img.xz
            orangepi-zero2w-${{ matrix.variant }}.img.xz.sha256
            orangepi-zero2w-${{ matrix.variant }}.info
          retention-days: 30

      - name: Upload to release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            orangepi-zero2w-${{ matrix.variant }}.img.xz
            orangepi-zero2w-${{ matrix.variant }}.img.xz.sha256
            orangepi-zero2w-${{ matrix.variant }}.info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    needs: [setup, build]
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        variant: ${{ fromJson(needs.setup.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: orangepi-zero2w-${{ matrix.variant }}

      - name: Install QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-aarch64 qemu-utils

      - name: Test image boot (QEMU)
        run: |
          # Extract image
          xz -d orangepi-zero2w-${{ matrix.variant }}.img.xz
          
          # Convert to qcow2 for QEMU
          qemu-img convert -f raw -O qcow2 \
            orangepi-zero2w-${{ matrix.variant }}.img \
            test-${{ matrix.variant }}.qcow2
          
          # Basic boot test (timeout after 60 seconds)
          timeout 60 qemu-system-aarch64 \
            -M virt \
            -cpu cortex-a53 \
            -m 1024 \
            -nographic \
            -drive file=test-${{ matrix.variant }}.qcow2,format=qcow2 \
            -netdev user,id=net0 \
            -device virtio-net-device,netdev=net0 \
            -serial mon:stdio \
            || true

      - name: Validate image structure
        run: |
          ./scripts/validate-image.sh orangepi-zero2w-${{ matrix.variant }}.img