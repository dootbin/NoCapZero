name: Test

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-qemu:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-aarch64 qemu-utils

      - name: Download latest runtime image
        run: |
          # Only for testing, in actual workflow we would test the built image
          mkdir -p test-artifacts
          # This is a placeholder and would be replaced with actual download logic in production
          # In a real scenario, we'd download from CI artifacts or use a specific build
          echo "Mock download for testing purposes"
          
      - name: Run basic QEMU boot test
        run: |
          # This is a placeholder for the actual test that would run in production
          # In an actual workflow, we'd use the downloaded image
          echo "Basic boot test would be performed here"
          exit 0  # Force success for demonstration

  test-hardware:
    runs-on: self-hosted
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run hardware tests
        run: |
          # This job would only run if we have self-hosted runners
          # with actual Orange Pi Zero 2W hardware attached
          echo "Hardware test would be performed here"
          # ./scripts/test-hardware.sh
          exit 0  # Force success for demonstration

  validate-scripts:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Shell script validation
        run: |
          # Verify shell scripts are valid
          for script in scripts/*.sh; do
            if [ -f "$script" ]; then
              echo "Validating $script"
              bash -n "$script"
            fi
          done

      - name: Config validation
        run: |
          # Check kernel config exists
          if [ ! -f configs/kernel-config ]; then
            echo "Error: Kernel config not found"
            exit 1
          fi
          
          # Check gadget-modes.yml is valid YAML
          if [ -f configs/gadget-modes.yml ]; then
            echo "Validating gadget-modes.yml"
            python3 -c "import yaml; yaml.safe_load(open('configs/gadget-modes.yml'))"
          else
            echo "Error: gadget-modes.yml not found"
            exit 1
          fi