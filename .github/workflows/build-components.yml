name: Build and Publish Components

on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'patches/kernel/**'
      - 'patches/uboot/**'
      - 'configs/kernel-config'
      - '.github/workflows/build-components.yml'
      - '!.github/workflows/build.yml'  # Don't trigger when build.yml changes

env:
  DEBIAN_FRONTEND: noninteractive
  ARCH: arm64
  CROSS_COMPILE: aarch64-linux-gnu-

permissions:
  contents: write

jobs:
  build-components:
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            device-tree-compiler \
            u-boot-tools \
            bison \
            flex \
            libssl-dev \
            libgnutls28-dev \
            bc \
            kmod \
            cpio \
            rsync \
            wget \
            curl \
            xz-utils \
            pixz

      - name: Setup build directories
        run: |
          mkdir -p build/{uboot,kernel,output}
          mkdir -p ${{ github.workspace }}/artifacts

      - name: Build ARM Trusted Firmware
        run: |
          cd build
          # Get latest stable release tag
          ATF_TAG=$(git ls-remote --tags --sort="v:refname" https://github.com/ARM-software/arm-trusted-firmware.git | grep -E 'refs/tags/v[0-9]+\.[0-9]+(\.[0-9]+)?$' | tail -n1 | sed 's/.*refs\/tags\///')
          echo "Building ARM Trusted Firmware $ATF_TAG"
          
          git clone --depth 1 -b "$ATF_TAG" \
            https://github.com/ARM-software/arm-trusted-firmware.git
          cd arm-trusted-firmware
          
          make PLAT=sun50i_h616 CROSS_COMPILE=$CROSS_COMPILE bl31
          cp build/sun50i_h616/release/bl31.bin ../uboot/

      - name: Build U-Boot
        run: |
          cd build/uboot
          # Get latest stable release tag
          UBOOT_TAG=$(git ls-remote --tags --sort="v:refname" https://github.com/u-boot/u-boot.git | grep -E 'refs/tags/v20[0-9]{2}\.[0-9]{2}$' | tail -n1 | sed 's/.*refs\/tags\///')
          echo "Building U-Boot $UBOOT_TAG"
          
          git clone --depth 1 -b "$UBOOT_TAG" \
            https://github.com/u-boot/u-boot.git u-boot-src
          cd u-boot-src
          
          # Apply patches if any
          for patch in ${{ github.workspace }}/patches/uboot/*.patch; do
            [ -f "$patch" ] && git apply "$patch"
          done
          
          # Copy BL31
          cp ../../arm-trusted-firmware/build/sun50i_h616/release/bl31.bin .
          
          # Build U-Boot
          make ARCH=arm CROSS_COMPILE=$CROSS_COMPILE orangepi_zero2w_defconfig
          make ARCH=arm CROSS_COMPILE=$CROSS_COMPILE BL31=bl31.bin -j$(nproc)
          
          # Copy output
          cp u-boot-sunxi-with-spl.bin ${{ github.workspace }}/artifacts/

      - name: Build Kernel
        run: |
          cd build/kernel
          git clone --depth 1 -b orange-pi-6.1-sun50iw9 \
            https://github.com/orangepi-xunlong/linux-orangepi.git kernel-src
          cd kernel-src
          
          # Apply custom patches
          for patch in ${{ github.workspace }}/patches/kernel/*.patch; do
            [ -f "$patch" ] && git apply "$patch"
          done
          
          # Configure kernel
          if [ -f ${{ github.workspace }}/configs/kernel-config ]; then
            cp ${{ github.workspace }}/configs/kernel-config .config
          else
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE defconfig
            ./scripts/config --enable CONFIG_ARCH_SUNXI
            ./scripts/config --enable CONFIG_MACH_SUN50I
            ./scripts/config --enable CONFIG_USB_GADGET
            ./scripts/config --enable CONFIG_USB_CONFIGFS
            ./scripts/config --enable CONFIG_USB_ETH
            ./scripts/config --enable CONFIG_USB_MASS_STORAGE
            ./scripts/config --enable CONFIG_USB_G_SERIAL
          fi
          
          make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE olddefconfig
          # Ensure modules are enabled after olddefconfig
          ./scripts/config --enable CONFIG_MODULES
          
          # Build kernel and modules
          make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) Image dtbs modules
          
          # Copy outputs
          cp arch/arm64/boot/Image ${{ github.workspace }}/artifacts/
          
          # Find and copy DTB (handle different locations)
          if [ -f arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dtb ]; then
            cp arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dtb ${{ github.workspace }}/artifacts/
          else
            # Search for Orange Pi Zero 2W DTB in alternative locations
            DTB_FILE=$(find arch/arm64/boot/dts -name "*orangepi*zero2w*.dtb" -o -name "*h618*.dtb" | head -1)
            if [ -n "$DTB_FILE" ]; then
              cp "$DTB_FILE" ${{ github.workspace }}/artifacts/sun50i-h618-orangepi-zero2w.dtb
              echo "Found DTB at: $DTB_FILE"
            else
              echo "WARNING: Could not find Orange Pi Zero 2W DTB file"
              echo "You may need to add patches or use a different kernel source"
            fi
          fi
          
          # Install modules
          make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE INSTALL_MOD_PATH=../../output/modules modules_install
          cd ../../output
          tar -czf ${{ github.workspace }}/artifacts/modules.tar.gz modules/

      - name: Download Mali GPU driver
        run: |
          wget -O ${{ github.workspace }}/artifacts/libmali.so \
            https://github.com/LibreELEC/libmali/raw/master/lib/aarch64-linux-gnu/libmali-bifrost-g31-r16p0-gbm.so

      - name: Validate build outputs
        id: validate
        run: |
          cd ${{ github.workspace }}/artifacts
          MISSING_FILES=""
          
          # Check required files
          for file in u-boot-sunxi-with-spl.bin Image sun50i-h618-orangepi-zero2w.dtb modules.tar.gz libmali.so; do
            if [ ! -f "$file" ]; then
              MISSING_FILES="$MISSING_FILES $file"
            fi
          done
          
          if [ -n "$MISSING_FILES" ]; then
            echo "ERROR: Missing build outputs:$MISSING_FILES"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "All required components built successfully"
            echo "valid=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate metadata
        if: steps.validate.outputs.valid == 'true'
        run: |
          cd ${{ github.workspace }}/artifacts
          cat > metadata.json << EOF
          {
            "build_date": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")",
            "git_commit": "${{ github.sha }}",
            "git_ref": "${{ github.ref }}",
            "kernel_version": "$(cd ${{ github.workspace }}/build/kernel/kernel-src && make kernelversion)",
            "uboot_version": "latest",
            "components": {
              "uboot": "u-boot-sunxi-with-spl.bin",
              "kernel": "Image",
              "dtb": "sun50i-h618-orangepi-zero2w.dtb",
              "modules": "modules.tar.gz",
              "mali_driver": "libmali.so"
            }
          }
          EOF
          
          # Generate checksums
          sha256sum * > SHA256SUMS

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: orangepi-zero2w-components
          path: artifacts/
          retention-days: 90

      - name: Create release (if tagged)
        if: startsWith(github.ref, 'refs/tags/components-')
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
          body: |
            Pre-built components for Orange Pi Zero 2W
            
            Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            Kernel Version: Orange Pi 6.1-sun50iw9
            
            ## Components
            - U-Boot bootloader with SPL
            - Linux kernel Image
            - Device Tree Blob
            - Kernel modules tarball
            - Mali GPU driver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Component Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix/use-prebuilt-binaries'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: components-latest
          name: Latest Components Build ($(date +'%Y-%m-%d %H:%M'))
          prerelease: false
          files: artifacts/*
          body: |
            ## Pre-built Components for Orange Pi Zero 2W
            
            Git Commit: ${{ github.sha }}
            
            ### Components:
            - U-Boot with SPL
            - Linux kernel Image  
            - Device tree blob
            - Kernel modules
            - Mali GPU driver
            
            ### Usage:
            These components are automatically used by the image build workflow.
            The `components-latest` tag always points to the most recent build.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}